unit Testdjson;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Variants, SysUtils, Classes, Dialogs, djson, windows, dateutils;

type
  // Test methods for class TJSON

  TestTdJSON = class(TTestCase)
  strict private
    function loadFile(const AFilename: string): string;
  public

  published
    procedure TestUser;
    procedure TestUserList;
    procedure TestListInListInList;
    procedure TestEmptyList;
    procedure TestMovie;
    procedure TestUnEscape;
    procedure TestEmptyDict;
  end;

var
  fmt: TFormatSettings;

implementation

function TestTdJSON.loadFile(const AFilename: string): string;
var
  jsonFile: TextFile;
  text: string;
begin
  result := '';

  AssignFile(jsonFile, AFilename);
  try
    Reset(jsonFile);

    while not Eof(jsonFile) do
    begin
      ReadLn(jsonFile, text);
      result := result+text;
    end;
  finally
    CloseFile(jsonFile);
  end;
end;

procedure TestTdJSON.TestEmptyDict;
var
  j: TdJSON;
begin
  with TdJSON.Parse(loadFile('test7.json')) do
  begin
    try
      check(_['QueryResponse']['Item'][0]['Name'].AsString = 'Advance');
      check(_['QueryResponse']['Item'][0]['ItemGroupDetail'].Items.Count = 0);
    finally
      Free;
    end;
  end;
end;

procedure TestTdJSON.TestEmptyList;
var
  j: TdJSON;
begin
  with TdJSON.Parse(loadFile('test4.json')) do
  begin
    try
      check(IsList = false);
      check(assigned(_['empty'].ListItems) = true);
      check(_['empty'].ListItems.count = 0);
    finally
      Free;
    end;
  end;
  with TdJSON.Parse(loadFile('test5.json')) do
  begin
    try
      check(IsList = true);
      check(assigned(ListItems) = true);
      check(ListItems.count = 0, inttostr(ListItems.count));
    finally
      Free;
    end;
  end;
end;

procedure TestTdJSON.TestListInListInList;
begin
  with TdJSON.Parse(loadFile('test3.json')) do
  begin
    try
      check(_[0].IsList = true);
      check(_[0][0][0].AsString = 'list in a list in a list');
    finally
      Free;
    end;
  end;
end;

procedure TestTdJSON.TestMovie;
begin
  with TdJSON.Parse(loadFile('test6.json')) do
  try
    check(_['page'].AsInteger = 1);
    check(_['results'][0]['id'].AsInteger = 262543);
    check(_['results'][0]['id'].AsString = '262543');
    check(_['results'][0]['original_title'].AsString = 'Automata');
    check(_['results'][0]['popularity'].AsString = '6.6273989934368');
  finally
    free;
  end;
end;

procedure TestTdJSON.TestUnEscape;
begin
  with TdJSON.Parse('{"name": "Kurt \u00e6 bc"}') do
  try
    check(_['name'].AsString = 'Kurt æ bc');
  finally
    free;
  end;
  with TdJSON.Parse('{"name": "a \b b"}') do
  try
    check(_['name'].AsString = 'a '+#8+' b');
  finally
    free;
  end;
  with TdJSON.Parse('{"name": "a \n b"}') do
  try
    check(_['name'].AsString = 'a '+#10+' b');
  finally
    free;
  end;
  with TdJSON.Parse('{"name": "a \r b"}') do
  try
    check(_['name'].AsString = 'a '+#13+' b');
  finally
    free;
  end;
  with TdJSON.Parse('{"name": "a \t b"}') do
  try
    check(_['name'].AsString = 'a '+#9+' b');
  finally
    free;
  end;
  with TdJSON.Parse('{"name": "a \f b"}') do
  try
    check(_['name'].AsString = 'a '+#12+' b');
  finally
    free;
  end;

  with TdJSON.Parse('{"name": "\\"}') do
  try
    check(_['name'].AsString = '\');
  finally
    free;
  end;
end;

procedure TestTdJSON.TestUser;
var
  photo, item, item_a: TdJSON;
  i: integer;
  fmtSettings: TFormatSettings;
begin
  GetLocaleFormatSettings(GetSystemDefaultLCID, fmtSettings);
  with TdJSON.Parse(loadFile('test1.json')) do
  begin
    try
      Check(_['username'].AsString = 'thomas', _['username'].AsString);
      for i in [1,2] do
      begin
        photo := _['photos'][i-1];
        check(photo['title'].AsString = format('Photo %d', [i]), 'title is not '+format('Photo %d', [i]));
        check(assigned(photo['urls']));
        check(photo['urls']['small'].AsString = format('http://example.com/photo%d_small.jpg', [i]), 'url is not '+format('http://example.com/photo%d_small.jpg', [i]));
        check(photo['urls']['large'].AsString = format('http://example.com/photo%d_large.jpg', [i]), 'url is not '+format('http://example.com/photo%d_large.jpg', [i]));
      end;

      for i in [1,2,3] do
      begin
        item := _['int_list'][i-1];
        check(item.AsInteger = i);
      end;

      for i in [1,2,3] do
      begin
        item := _['str_list'][i-1];
        check(item.AsString = inttostr(i));
      end;

      check(_['escape_text'].AsString = 'Some "test" \\ \u00e6=æ', format('%s is not Some "test" \\ \u00e6=æ', [_['escape_text'].AsString]));
      check(_['escape_path'].AsString = 'C:\test\test.txt', format('%s is not C:\test\test.txt', [_['escape_path'].AsString]));

      check(_['nullvalue'].AsString = '', 'nullvalue is not empty');
      check(_['nullvalue'].Value = null, 'nullvalue value is not null');

      check(_['null_list'].ListItems.Count = 1, format('null_list count is not 1: %d', [_['null_list'].ListItems.Count]));
      check(_['emptyList'].ListItems.Count = 0, format('emptyList is not empty: %d', [_['null_list'].ListItems.Count]));
      check(_['emptyStringList'].ListItems.Count = 1, format('emptyStringList count is not 1: %d', [_['emptyStringList'].ListItems.Count]));

    finally
      Free;
    end;
  end;
end;

procedure TestTdJSON.TestUserList();
var
  users: TdJSON;
  user: TdJSON;
  i: integer;

  u: TdJSON;
begin
  users := TdJSON.Parse(loadFile('test2.json'));
  try
    check(users.ListItems.Count = 3, format('%d is not 3', [users.ListItems.Count]));
    for i in [0,1,2] do
    begin
      user := users[i];
      case i of
        0: check(user['username'].AsString = 'thomas', user['username'].AsString+' is not thomas');
        1: check(user['name'].AsString = 'Kurt', user['name'].AsString+' is not kurt');
        2: check(user['username'].AsString = 'bent', user['username'].AsString+' is not bent');
      end;
    end;
  finally
    users.free;
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTdJSON.Suite);
end.

